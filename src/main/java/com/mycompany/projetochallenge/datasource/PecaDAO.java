package com.mycompany.projetochallenge.datasource;

import com.mycompany.projetochallenge.model.Peca;
import com.mycompany.projetochallenge.model.interfaces.IPeca;
import config.ConexaoDB;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class PecaDAO {
    private static final Logger LOG = Logger.getLogger(PecaDAO.class.getName());

    // Método para criar a tabela peca, caso não exista
    public void criarTabela() {
        final String sql = "CREATE TABLE peca ("
                + "id_peca INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                + "descricao VARCHAR(255) NOT NULL, "
                + "preco DECIMAL(10, 2) NOT NULL, "
                + "imagem VARCHAR(255))";

        try (Connection conn = ConexaoDB.getInstance().getConexao();
             Statement stmt = conn.createStatement()) {
            LOG.info("Tabela 'peca' em processo de criação!!!");
            stmt.execute(sql);
            LOG.info("Tabela criada com sucesso!!!");
        } catch (SQLException ex) {
            LOG.log(Level.SEVERE, "Erro ao acessar Banco de Dados: " + ex.getMessage(), ex);
        }
    }

    // Método para remover a tabela peca
    public void removerTabela() {
        try (Connection conn = ConexaoDB.getInstance().getConexao();
             Statement stmt = conn.createStatement()) {
            LOG.info("Tabela 'peca' em processo de REMOÇÃO!!!");
            stmt.execute("DROP TABLE peca");
            LOG.info("Tabela removida com sucesso!!!");
        } catch (SQLException ex) {
            LOG.log(Level.SEVERE, "Erro ao acessar Banco de Dados: " + ex.getMessage(), ex);
        }
    }

    // Método para adicionar uma peça
    public void adicionarPeca(IPeca peca) {
        final String sql = "INSERT INTO peca(descricao, preco, imagem) VALUES (?, ?, ?)";

        try (Connection conn = ConexaoDB.getInstance().getConexao();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, peca.getDescricao());
            stmt.setDouble(2, peca.getPreco());
            stmt.setString(3, peca.getImagem());

            stmt.executeUpdate();
            LOG.info("Peça adicionada com sucesso!");
        } catch (SQLException ex) {
            LOG.log(Level.SEVERE, "Erro ao acessar Banco de Dados: " + ex.getMessage(), ex);
        }
    }

    // Método para remover uma peça
    public void removerPeca(int idPeca) {
        final String sql = "DELETE FROM peca WHERE id_peca = ?";

        try (Connection conn = ConexaoDB.getInstance().getConexao();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, idPeca);
            stmt.executeUpdate();
            LOG.info("Peça removida com sucesso!");
        } catch (SQLException ex) {
            LOG.log(Level.SEVERE, "Erro ao acessar Banco de Dados: " + ex.getMessage(), ex);
        }
    }

    // Método para listar todas as peças
    public List<IPeca> listar() {
        List<IPeca> pecas = new ArrayList<>();
        final String sql = "SELECT * FROM peca";

        try (Connection conn = ConexaoDB.getInstance().getConexao();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                IPeca peca = new Peca(
                        rs.getInt("id_peca"),
                        rs.getString("descricao"),
                        rs.getDouble("preco"),
                        rs.getString("imagem")
                );
                pecas.add(peca);
            }
        } catch (SQLException ex) {
            LOG.log(Level.SEVERE, "Erro ao acessar Banco de Dados: " + ex.getMessage(), ex);
        }

        return pecas;
    }

    // Método para buscar uma peça pelo seu ID
    public IPeca buscarPecaPorId(int idPeca) {
        IPeca peca = null;
        final String sql = "SELECT * FROM peca WHERE id_peca = ?";

        try (Connection conn = ConexaoDB.getInstance().getConexao();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, idPeca);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    peca = new Peca(
                            rs.getInt("id_peca"),
                            rs.getString("descricao"),
                            rs.getDouble("preco"),
                            rs.getString("imagem")
                    );
                }
            }
        } catch (SQLException ex) {
            LOG.log(Level.SEVERE, "Erro ao acessar Banco de Dados: " + ex.getMessage(), ex);
        }

        return peca;
    }
}
