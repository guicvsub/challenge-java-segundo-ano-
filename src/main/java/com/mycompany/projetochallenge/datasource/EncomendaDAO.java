package com.mycompany.projetochallenge.datasource;

import com.mycompany.projetochallenge.model.Cliente;
import com.mycompany.projetochallenge.model.Encomenda;
import com.mycompany.projetochallenge.model.EncomendaConcreta;
import com.mycompany.projetochallenge.model.Mecanico;
import com.mycompany.projetochallenge.model.Peca;
import config.ConexaoDB;
import java.sql.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class EncomendaDAO {
    private static final Logger LOG = Logger.getLogger(EncomendaDAO.class.getName());
    
    private final ClienteDAO clienteDAO;
    private final MecanicoDAO mecanicoDAO;
    private final PecaDAO pecaDAO;
    
    public EncomendaDAO() {
        this.clienteDAO = new ClienteDAO();
        this.mecanicoDAO = new MecanicoDAO();
        this.pecaDAO = new PecaDAO();
    }

    public void criarTabela() {
        final String sqlEncomenda = "CREATE TABLE encomenda ("
                + "id_encomenda INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                + "id_cliente INTEGER NOT NULL, "
                + "id_mecanico INTEGER NOT NULL, "
                + "FOREIGN KEY (id_cliente) REFERENCES cliente(id), "
                + "FOREIGN KEY (id_mecanico) REFERENCES mecanico(id))";
        
        final String sqlPecasEncomenda = "CREATE TABLE peca_encomenda ("
                + "id_encomenda INTEGER, "
                + "id_peca INTEGER, "
                + "PRIMARY KEY (id_encomenda, id_peca), "
                + "FOREIGN KEY (id_encomenda) REFERENCES encomenda(id_encomenda), "
                + "FOREIGN KEY (id_peca) REFERENCES peca(id_peca))";
        
        try (Connection conn = ConexaoDB.getInstance().getConexao(); 
             Statement stmt = conn.createStatement()) {
            LOG.info("Tabelas 'encomenda' e 'peca_encomenda' em processo de criação!");
            stmt.execute(sqlEncomenda);
            stmt.execute(sqlPecasEncomenda);
            LOG.info("Tabelas criadas com sucesso!");
        } catch (SQLException ex) {
            LOG.log(Level.SEVERE, "Erro ao acessar Banco de Dados: " + ex.getMessage(), ex);
        }
    }
    
    public void removerTabela() {
        try (Connection conn = ConexaoDB.getInstance().getConexao(); 
             Statement stmt = conn.createStatement()) {
            LOG.info("Tabelas em processo de remoção!");
            stmt.execute("DROP TABLE peca_encomenda");
            stmt.execute("DROP TABLE encomenda");
            LOG.info("Tabelas removidas com sucesso!");
        } catch (SQLException ex) {
            LOG.log(Level.SEVERE, "Erro ao acessar Banco de Dados: " + ex.getMessage(), ex);
        }
    }
    
    public void adicionarEncomenda(final Encomenda encomenda) {
        final String sqlEncomenda = "INSERT INTO encomenda(id_cliente, id_mecanico) VALUES (?, ?)";
        final String sqlPecaEncomenda = "INSERT INTO peca_encomenda(id_encomenda, id_peca) VALUES (?, ?)";
        
        try (Connection conn = ConexaoDB.getInstance().getConexao()) {
            conn.setAutoCommit(false);
            
            try (PreparedStatement stmtEncomenda = conn.prepareStatement(sqlEncomenda, Statement.RETURN_GENERATED_KEYS)) {
                LOG.info("Encomenda em processo de persistência!");
                
                stmtEncomenda.setInt(1, encomenda.getCliente().getId());
                stmtEncomenda.setInt(2, encomenda.getMecanico().getId());
                stmtEncomenda.executeUpdate();
                
                int idEncomenda;
                try (ResultSet rs = stmtEncomenda.getGeneratedKeys()) {
                    if (rs.next()) {
                        idEncomenda = rs.getInt(1);
                        
                        // Inserir relações com peças
                        try (PreparedStatement stmtPecas = conn.prepareStatement(sqlPecaEncomenda)) {
                            for (Peca peca : encomenda.getListaPecas()) {
                                stmtPecas.setInt(1, idEncomenda);
                                stmtPecas.setInt(2, peca.getIdPeca());
                                stmtPecas.executeUpdate();
                            }
                        }
                    }
                }
                
                conn.commit();
                LOG.info("Encomenda Criada!");
                
            } catch (SQLException ex) {
                conn.rollback();
                throw ex;
            }
        } catch (SQLException ex) {
            LOG.log(Level.SEVERE, "Erro ao acessar Banco de Dados: " + ex.getMessage(), ex);
        }
    }
    
    public void removerEncomenda(int idEncomenda) {
        try (Connection conn = ConexaoDB.getInstance().getConexao()) {
            conn.setAutoCommit(false);
            
            try {
                // Primeiro remove as relações com peças
                try (PreparedStatement stmt = conn.prepareStatement("DELETE FROM peca_encomenda WHERE id_encomenda = ?")) {
                    stmt.setInt(1, idEncomenda);
                    stmt.executeUpdate();
                }
                
                // Depois remove a encomenda
                try (PreparedStatement stmt = conn.prepareStatement("DELETE FROM encomenda WHERE id_encomenda = ?")) {
                    stmt.setInt(1, idEncomenda);
                    stmt.executeUpdate();
                }
                
                conn.commit();
                LOG.info("Encomenda Removida!");
                
            } catch (SQLException ex) {
                conn.rollback();
                throw ex;
            }
        } catch (SQLException ex) {
            LOG.log(Level.SEVERE, "Erro ao acessar Banco de Dados: " + ex.getMessage(), ex);
        }
    }
    
    public Set<Encomenda> listar() {
        Set<Encomenda> encomendas = new HashSet<>();
        String sql = "SELECT e.*, c.*, m.*, p.* FROM encomenda e "
                + "JOIN cliente c ON e.id_cliente = c.id "
                + "JOIN mecanico m ON e.id_mecanico = m.id "
                + "LEFT JOIN peca_encomenda pe ON e.id_encomenda = pe.id_encomenda "
                + "LEFT JOIN peca p ON pe.id_peca = p.id_peca";
        
        try (Connection conn = ConexaoDB.getInstance().getConexao(); 
             Statement stmt = conn.createStatement(); 
             ResultSet rs = stmt.executeQuery(sql)) {
            
            int currentEncomendaId = -1;
            List<Peca> pecas = new ArrayList<>();
            
            while (rs.next()) {
                int encomendaId = rs.getInt("id_encomenda");
                
                if (currentEncomendaId != encomendaId) {
                    // Nova encomenda
                    if (currentEncomendaId != -1) {
                        // Adicionar encomenda anterior ao set
                        adicionarEncomendaAoSet(encomendas, currentEncomendaId, pecas);
                    }
                    currentEncomendaId = encomendaId;
                    pecas = new ArrayList<>();
                }
                
                // Adicionar peça à lista atual
                if (rs.getInt("id_peca") != 0) {
                    Peca peca = new Peca(
                        rs.getInt("id_peca"),
                        rs.getString("descricao"),
                        rs.getDouble("preco"),
                        rs.getString("imagem")
                    );
                    pecas.add(peca);
                }
            }
            
            // Adicionar última encomenda
            if (currentEncomendaId != -1) {
                adicionarEncomendaAoSet(encomendas, currentEncomendaId, pecas);
            }
            
        } catch (SQLException ex) {
            LOG.log(Level.SEVERE, "Erro ao acessar Banco de Dados: " + ex.getMessage(), ex);
        }
        return encomendas;
    }
    
    private void adicionarEncomendaAoSet(Set<Encomenda> encomendas, int encomendaId, List<Peca> pecas) throws SQLException {
        Cliente cliente = clienteDAO.buscarClientePorId(encomendaId);
        Mecanico mecanico = mecanicoDAO.buscarMecanicoPorId(encomendaId);
        
        Encomenda encomenda = new EncomendaConcreta(encomendaId, cliente, mecanico, pecas);
        encomendas.add(encomenda);
    }
}
